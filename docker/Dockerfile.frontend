# ===================================================================
# Dockerfile.frontend - React TypeScript Frontend Container
# ===================================================================

# Multi-stage build for optimized production image
FROM node:18-alpine as builder

# Set environment variables
ENV NODE_ENV=production \
    GENERATE_SOURCEMAP=false \
    INLINE_RUNTIME_CHUNK=false

# Set work directory
WORKDIR /app

# Install dependencies for node-gyp and native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production --silent && \
    npm cache clean --force

# Copy source code
COPY . .

# Copy environment configuration
COPY .env* ./

# Build the application
RUN npm run build

# ===================================================================
# Production stage
# ===================================================================
FROM nginx:alpine as production

# Install curl for health checks
RUN apk add --no-cache curl

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

# Copy custom nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf
COPY nginx-default.conf /etc/nginx/conf.d/default.conf

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/build /usr/share/nginx/html

# Copy static assets
COPY --from=builder --chown=nextjs:nodejs /app/public /usr/share/nginx/html

# Create logs directory
RUN mkdir -p /var/log/nginx /app/logs && \
    chown -R nextjs:nodejs /var/log/nginx /app/logs

# Switch to non-root user for running nginx
USER nextjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]