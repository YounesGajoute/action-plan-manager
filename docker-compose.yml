# ===================================================================
# docker-compose.dev.yml - Development Docker Compose Configuration
# Action Plan Management System
# ===================================================================

version: '3.8'

services:
  # ===============================
  # Frontend Development (React)
  # ===============================
  frontend-dev:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=development
    container_name: actionplan_frontend_dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:5000
      - REACT_APP_WS_URL=ws://localhost:5000
      - REACT_APP_MS_CLIENT_ID=${MS_CLIENT_ID}
      - REACT_APP_MS_TENANT_ID=${MS_TENANT_ID}
      - REACT_APP_MS_AUTHORITY=${MS_AUTHORITY}
      - REACT_APP_MS_REDIRECT_URI=http://localhost:3000/auth/callback
      - FAST_REFRESH=true
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - ./logs/frontend:/app/logs
    ports:
      - "3000:3000"
    networks:
      - actionplan-dev-network
    command: npm start
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - api-dev

  # ===============================
  # Backend Development (Flask)
  # ===============================
  api-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: actionplan_api_dev
    restart: unless-stopped
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://${POSTGRES_USER:-actionplan}:${POSTGRES_PASSWORD:-secure_password}@db-dev:5432/${POSTGRES_DB:-actionplan}
      - REDIS_URL=redis://cache-dev:6379/0
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret}
      - SECRET_KEY=${SECRET_KEY:-dev-flask-secret}
      # Microsoft 365 Configuration
      - MS_CLIENT_ID=${MS_CLIENT_ID}
      - MS_CLIENT_SECRET=${MS_CLIENT_SECRET}
      - MS_TENANT_ID=${MS_TENANT_ID}
      - MS_AUTHORITY=${MS_AUTHORITY}
      # Email Configuration (Development)
      - SMTP_SERVER=${SMTP_SERVER:-smtp.office365.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_FROM_ADDRESS=${EMAIL_FROM_ADDRESS:-dev@techmac.ma}
      - EMAIL_FROM_NAME=${EMAIL_FROM_NAME:-Action Plan Dev}
      # Development Features
      - ENABLE_ONEDRIVE_SYNC=${ENABLE_ONEDRIVE_SYNC:-false}
      - ENABLE_EMAIL_NOTIFICATIONS=${ENABLE_EMAIL_NOTIFICATIONS:-false}
      - ENABLE_TELEGRAM_BOT=${ENABLE_TELEGRAM_BOT:-false}
      - SQLALCHEMY_ECHO=true
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./uploads:/app/uploads
      - ./logs/api:/app/logs
    ports:
      - "5000:5000"
      - "5678:5678"  # Python debugger port
    depends_on:
      - db-dev
      - cache-dev
    networks:
      - actionplan-dev-network
    command: python app.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===============================
  # PostgreSQL Development Database
  # ===============================
  db-dev:
    image: postgres:15-alpine
    container_name: actionplan_db_dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-actionplan}
      - POSTGRES_USER=${POSTGRES_USER:-actionplan}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./backups/database:/backups
      - ./logs/postgres:/var/log/postgresql
    ports:
      - "5433:5432"  # Different port for dev
    networks:
      - actionplan-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-actionplan} -d ${POSTGRES_DB:-actionplan}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ===============================
  # Redis Development Cache
  # ===============================
  cache-dev:
    image: redis:7-alpine
    container_name: actionplan_cache_dev
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-dev_password}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_dev_data:/data
      - ./logs/redis:/var/log/redis
    ports:
      - "6380:6379"  # Different port for dev
    networks:
      - actionplan-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===============================
  # MailHog (Development Email Testing)
  # ===============================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: actionplan_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI port
    networks:
      - actionplan-dev-network

  # ===============================
  # Redis Commander (Development Redis UI)
  # ===============================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: actionplan_redis_commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:cache-dev:6379:0:${REDIS_PASSWORD:-dev_password}
    ports:
      - "8081:8081"
    depends_on:
      - cache-dev
    networks:
      - actionplan-dev-network

  # ===============================
  # pgAdmin (Development Database UI)
  # ===============================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: actionplan_pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@techmac.ma}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./monitoring/pgadmin/servers.json:/pgadmin4/servers.json:ro
    ports:
      - "8080:80"
    depends_on:
      - db-dev
    networks:
      - actionplan-dev-network

  # ===============================
  # Prometheus (Development Monitoring)
  # ===============================
  prometheus-dev:
    image: prom/prometheus:latest
    container_name: actionplan_prometheus_dev
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=72h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - actionplan-dev-network

  # ===============================
  # Grafana (Development Monitoring)
  # ===============================
  grafana-dev:
    image: grafana/grafana:latest
    container_name: actionplan_grafana_dev
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus-dev
    networks:
      - actionplan-dev-network

# ===============================
# VOLUMES
# ===============================
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local
  pgadmin_data:
    driver: local

# ===============================
# NETWORKS
# ===============================
networks:
  actionplan-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16